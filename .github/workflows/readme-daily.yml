name: Update Profile README Daily

on:
  schedule:
    - cron: "0 * * * *"   # hourly (UTC)
  workflow_dispatch:
    inputs:
      force:
        description: "Force commit this run (bypass random hour guard)"
        required: false
        default: "false"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate content (hourly; commit only 6–10/day, unless forced)
        env:
          FORCE_COMMIT: ${{ github.event.inputs.force || 'false' }}
        run: |
          cat > update.js <<'EOF'
          import fs from 'fs/promises';

          // ======= Commit frequency guard: 6–10 random hours per UTC day =======
          const FORCE = (process.env.FORCE_COMMIT || '').toLowerCase() === 'true';
          if (!FORCE) {
            function xorshift(seed){let x=seed|0;return()=>{x^=x<<13;x^=x>>>17;x^=x<<5;return (x>>>0)/0xFFFFFFFF;};}
            const now=new Date(), y=now.getUTCFullYear(), m=String(now.getUTCMonth()+1).padStart(2,'0'), d=String(now.getUTCDate()).padStart(2,'0');
            const dayKey=`${y}${m}${d}`, hour=now.getUTCHours();
            let seed=0; for (const ch of dayKey) seed=(seed*31+ch.charCodeAt(0))|0;
            const rand=xorshift(seed);
            const quota=6+Math.floor(rand()*5); // 6..10
            const hours=[...Array(24).keys()];
            for (let i=hours.length-1;i>0;i--){const j=Math.floor(rand()*(i+1)); [hours[i],hours[j]]=[hours[j],hours[i]];}
            const commitHours = new Set(hours.slice(0, quota));
            console.log('Commit hours (UTC) today:', [...commitHours].sort((a,b)=>a-b).join(','));
            console.log('Current UTC hour:', hour);
            if (!commitHours.has(hour)) {
              console.log(`Skip commit this hour (UTC=${hour}); quota=${quota}/day`);
              process.exit(0);
            }
          } else {
            console.log('FORCE_COMMIT=true → bypassing random hour guard for this run.');
          }

          // ====================== Your updater logic ============================
          const nowUtc=()=>new Date().toISOString().replace('T',' ').replace(/\..+/,'')+' UTC';
          const clamp=(s)=>s?.toString().trim().replace(/\s+/g,' ')||'';
          async function fetchJSON(url){const r=await fetch(url,{headers:{Accept:'application/json'}}); if(!r.ok) throw new Error(r.status); return r.json();}
          async function fetchText(url){const r=await fetch(url); if(!r.ok) throw new Error(r.status); return r.text();}

          const updated=`Last updated: ${nowUtc()}`;

          let quoteBlock='Could not load quote today.';
          try{const q=await fetchJSON('https://api.quotable.io/random'); quoteBlock=`> ${clamp(q.content)}\n>\n> — **${clamp(q.author)}**`;}catch{}

          let jokeBlock='Could not load a joke today.';
          try{const j=await fetchJSON('https://v2.jokeapi.dev/joke/Any?type=single&safe-mode'); jokeBlock=j?.joke?j.joke.replace(/\s+/g,' '):jokeBlock;}catch{}

          let blogBlock='- (no RSS configured)';
          const rssUrl=process.env.BLOG_RSS;
          if (rssUrl) {
            try{
              const xml=await fetchText(rssUrl);
              const items=[...xml.matchAll(/<item>([\s\S]*?)<\/item>/gi)].slice(0,5).map(m=>m[1]);
              const posts=items.map(it=>{
                const t=(it.match(/<title>([\s\S]*?)<\/title>/i)?.[1]||'Untitled').replace(/<!\[CDATA\[|\]\]>/g,'').trim();
                const l=(it.match(/<link>([\s\S]*?)<\/link>/i)?.[1]||'').trim();
                return `- [${t}](${l})`;
              });
              if (posts.length) blogBlock=posts.join('\n');
            } catch { blogBlock='- (failed to fetch RSS)'; }
          }

          const readme=await fs.readFile('README.md','utf8');
          const replaceSection=(content,marker,inner)=>{
            const start=`<!--START_SECTION:${marker}-->`, end=`<!--END_SECTION:${marker}-->`;
            const pattern=new RegExp(`${start}[\\s\\S]*?${end}`,'m');
            return content.replace(pattern,`${start}\n${inner}\n${end}`);
          };

          let out=readme;
          out=replaceSection(out,'updated',updated);
          out=replaceSection(out,'quote',quoteBlock);
          out=replaceSection(out,'joke',jokeBlock);
          out=replaceSection(out,'blog',blogBlock);

          await fs.writeFile('README.md',out,'utf8');
          console.log('README.md updated.');
          EOF

          node update.js

      - name: Commit changes
        env:
          GH_NAME: ${{ github.repository_owner }}
          GH_EMAIL: ${{ vars.MY_GH_EMAIL }}   # repo variable (non-sensitive)
        run: |
          set -e
          echo "Branch: $(git branch --show-current || echo 'detached HEAD')"
          git status --porcelain
          git diff --unified=0 README.md || true
      
          git config user.name "$GH_NAME"
          git config user.email "$GH_EMAIL"
          export GIT_AUTHOR_NAME="$GH_NAME"
          export GIT_AUTHOR_EMAIL="$GH_EMAIL"
          export GIT_COMMITTER_NAME="$GH_NAME"
          export GIT_COMMITTER_EMAIL="$GH_EMAIL"
      
          if git diff --quiet; then
            echo "No changes to commit."
            exit 0
          fi
      
          git add README.md
          git commit -m "chore: hourly randomized update"
          git pull --rebase origin main || true
          git push origin HEAD:main
      
